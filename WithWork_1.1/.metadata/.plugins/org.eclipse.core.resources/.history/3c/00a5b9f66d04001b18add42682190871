package com.spring.withwork.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.spring.withwork.dao.MainDao;
import com.spring.withwork.vo.CompanyVO;
import com.spring.withwork.vo.GuestVO;
import com.spring.withwork.vo.MailUtils;
import com.spring.withwork.vo.TempKey;

@Service
public class MainServiceImpl implements MainService{

	@Autowired
	private MainDao mainDao;
	
	// 인증 메일 보내기 위한 필드 변수 선언
	@Autowired
	private JavaMailSender mailSender;
	
	@Override
	@Transactional
	public void register(GuestVO guest) throws Exception {
		System.out.println("MainServiceImpl.register() 실행");
		mainDao.register(guest);
		
		// 임의의 authkey 생성
		String authkey = new TempKey().getKey(50, false);
		
		guest.setAuthKey(authkey);
		mainDao.updateAuthKey(guest);
		
		// mail 작성 관련 
		MailUtils sendMail = new MailUtils(mailSender);
		
		// mail 작성 관련 

		sendMail.setSubject("WithWork 회원가입 이메일 인증");
		sendMail.setText(new StringBuffer().append("<h1>[이메일 인증]</h1>")
				.append("<p>아래 링크를 클릭하시면 이메일 인증이 완료됩니다.</p>")
				.append("<a href='http://localhost:8080/regiConfirm.do?id=")
				.append(guest.getId())
				.append("&email=")
				.append(guest.getEmail())
				.append("&authkey=")
				.append(authkey)
				.append("' target='_blenk'>이메일 인증 확인</a>")
				.toString());
		sendMail.setFrom("WithWork", "WithWork");
		sendMail.setTo(guest.getEmail());
		sendMail.send();
	}
	
	@Override
	public void updateAuthStatus(GuestVO guest) {
		System.out.println("MainServiceImpl.updateAuthStatus() 실행");
		mainDao.updateAuthStatus(guest);
	}

	@Override
	public int checkId(String id) {
		System.out.println("MainServiceImpl.checkId() 실행");
		int result = mainDao.checkId(id);
		return result;
	}
	
	@Override
	public String findId(GuestVO guest) {
		System.out.println("MainServiceImpl.findId() 실행");
		System.out.println("guest : " + guest);
		return mainDao.findId(guest);
	}
	
	@Override
	public int chkId(GuestVO guest) {
		System.out.println("MainServiceImpl.chkId() 실행");
		return mainDao.chkId(guest);
	}
	
	@Override
	public int updatePwd(GuestVO guest) {
		System.out.println("MainServiceImpl.updatePwd() 실행");
		return mainDao.updatePwd(guest);
	}
	
	@Override
	public String login(GuestVO guest) {
		System.out.println("MainServiceImpl.login() 실행");
		String authStatus =  mainDao.login(guest);
		System.out.println("service login authStatus : " + authStatus);
		String g_name = "";
		if(authStatus.equals("withwork")) {
			g_name = mainDao.guestInfo(guest);
			System.out.println("name : " + g_name);
		}
		return g_name;
	}
	
	@Transactional
	@Override
	public String otherLogin(GuestVO guest) {
		System.out.println("MainServiceImpl.login() 실행");
		System.out.println("받은 정보 : " + guest);
		System.out.println("authstatus : " + guest.getAuthStatus());
		String authStatus = "";
		String g_name = "";
		if(guest.getAuthStatus().equals("google")) {
			System.out.println("google계정으로 로그인 시도 중");
			authStatus = mainDao.otherLogin(guest);
			System.out.println("google 계정 로그인 여부 authStatus : " + authStatus);
			//만약 구글 아이디로 DB에 입력이 안되어 있을 시(result값이 0 인 경우) DB에 insert
			if(authStatus == null) {
				System.out.println("google 아이디가 현재 입력되어있지 않음. start insert");
				mainDao.googleRegister(guest);
				authStatus = mainDao.otherLogin(guest);
			}
		} else if(guest.getAuthStatus().equals("kakao")) {
			System.out.println("kakao계정으로 로그인 시도 중");
			authStatus = mainDao.otherLogin(guest);
			System.out.println("kakao 계정 로그인 여부 authStatus : " + authStatus);
			//만약 카카오 아이디로 DB에 입력이 안되어 있을 시(result값이 0 인 경우) DB에 insert
			if(authStatus == "") {
				System.out.println("kakao 아이디가 현재 입력되어있지 않음. start insert");
				mainDao.kakaoRegister(guest);
			}
		}
		
		if(authStatus.equals("google") || authStatus.equals("kakao")) {
			g_name = mainDao.guestInfo(guest);
			System.out.println("name : " + g_name);
		}
		
		return g_name;
	}
	
	@Override
	public String guestInfo(GuestVO guest) {
		System.out.println("MainServiceImpl.guestInfo() 실행");
		return mainDao.guestInfo(guest);
	}
	
	@Override
	public int insertGroup(CompanyVO company, GuestVO guest) {
		System.out.println("MainServiceImpl.insertGroup() 실행");
		return mainDao.insertGroup(company, guest);
	}
	
	@Override
	public int googleRegister(GuestVO guest) {
		System.out.println("MainServiceImpl.googleRegister() 실행");
		return mainDao.googleRegister(guest);
	}
	
	@Override
	public int kakaoRegister(GuestVO guest) {
		System.out.println("MainServiceImpl.kakaoRegister() 실행");
		return mainDao.kakaoRegister(guest);
	}
	
	@Override
	public int updateName(GuestVO guest) {
		System.out.println("MainServiceImpl.updateName() 실행");
		return mainDao.updateName(guest);
	}
	
	@Override
	public int checkPwd(GuestVO guest) {
		System.out.println("MainServiceImpl.checkPwd() 실행");
		return mainDao.checkPwd(guest);
	}
	
	@Override
	public void withdrawal(GuestVO guest) {
		System.out.println("MainServiceImpl.withdrawal() 실행");
		mainDao.withdrawal(guest);
	}
}
